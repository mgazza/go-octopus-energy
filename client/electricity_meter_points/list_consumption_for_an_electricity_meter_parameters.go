// Code generated by go-swagger; DO NOT EDIT.

package electricity_meter_points

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListConsumptionForAnElectricityMeterParams creates a new ListConsumptionForAnElectricityMeterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListConsumptionForAnElectricityMeterParams() *ListConsumptionForAnElectricityMeterParams {
	return &ListConsumptionForAnElectricityMeterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListConsumptionForAnElectricityMeterParamsWithTimeout creates a new ListConsumptionForAnElectricityMeterParams object
// with the ability to set a timeout on a request.
func NewListConsumptionForAnElectricityMeterParamsWithTimeout(timeout time.Duration) *ListConsumptionForAnElectricityMeterParams {
	return &ListConsumptionForAnElectricityMeterParams{
		timeout: timeout,
	}
}

// NewListConsumptionForAnElectricityMeterParamsWithContext creates a new ListConsumptionForAnElectricityMeterParams object
// with the ability to set a context for a request.
func NewListConsumptionForAnElectricityMeterParamsWithContext(ctx context.Context) *ListConsumptionForAnElectricityMeterParams {
	return &ListConsumptionForAnElectricityMeterParams{
		Context: ctx,
	}
}

// NewListConsumptionForAnElectricityMeterParamsWithHTTPClient creates a new ListConsumptionForAnElectricityMeterParams object
// with the ability to set a custom HTTPClient for a request.
func NewListConsumptionForAnElectricityMeterParamsWithHTTPClient(client *http.Client) *ListConsumptionForAnElectricityMeterParams {
	return &ListConsumptionForAnElectricityMeterParams{
		HTTPClient: client,
	}
}

/*
ListConsumptionForAnElectricityMeterParams contains all the parameters to send to the API endpoint

	for the list consumption for an electricity meter operation.

	Typically these are written to a http.Request.
*/
type ListConsumptionForAnElectricityMeterParams struct {

	/* GroupBy.

	   Aggregates consumption over a specified time period. A day is considered to start and end at midnight in the server’s timezone. The default is that consumption is returned in half-hour periods. Accepted values are: * ‘hour’ * ‘day’ * ‘week’ * ‘month’ * ‘quarter’.
	*/
	GroupBy *string

	// Mpan.
	Mpan string

	/* OrderBy.

	   Ordering of results returned. Default is that results are returned in reverse order from latest available figure. Valid values: * ‘period’, to give results ordered forward. * ‘-period’, (default), to give results ordered from most recent backwards.
	*/
	OrderBy *string

	/* Page.

	   A page number within the paginated result set.
	*/
	Page *int64

	/* PageSize.

	   Page size of returned results. Default is 100, maximum is 25000 to give a full year of half-hourly consumption details.
	*/
	PageSize *int64

	/* PeriodFrom.

	   Show results from the given datetime (inclusive). This parameter can be provided on its own.

	   Format: datetime
	*/
	PeriodFrom *strfmt.DateTime

	/* PeriodTo.

	   Show results up to the given datetime (exclusive). You must also provide the period_from parameter in order to create a range.

	   Format: datetime
	*/
	PeriodTo *strfmt.DateTime

	// SerialNumber.
	SerialNumber string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list consumption for an electricity meter params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListConsumptionForAnElectricityMeterParams) WithDefaults() *ListConsumptionForAnElectricityMeterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list consumption for an electricity meter params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListConsumptionForAnElectricityMeterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithTimeout(timeout time.Duration) *ListConsumptionForAnElectricityMeterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithContext(ctx context.Context) *ListConsumptionForAnElectricityMeterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithHTTPClient(client *http.Client) *ListConsumptionForAnElectricityMeterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupBy adds the groupBy to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithGroupBy(groupBy *string) *ListConsumptionForAnElectricityMeterParams {
	o.SetGroupBy(groupBy)
	return o
}

// SetGroupBy adds the groupBy to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetGroupBy(groupBy *string) {
	o.GroupBy = groupBy
}

// WithMpan adds the mpan to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithMpan(mpan string) *ListConsumptionForAnElectricityMeterParams {
	o.SetMpan(mpan)
	return o
}

// SetMpan adds the mpan to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetMpan(mpan string) {
	o.Mpan = mpan
}

// WithOrderBy adds the orderBy to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithOrderBy(orderBy *string) *ListConsumptionForAnElectricityMeterParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithPage(page *int64) *ListConsumptionForAnElectricityMeterParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithPageSize(pageSize *int64) *ListConsumptionForAnElectricityMeterParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPeriodFrom adds the periodFrom to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithPeriodFrom(periodFrom *strfmt.DateTime) *ListConsumptionForAnElectricityMeterParams {
	o.SetPeriodFrom(periodFrom)
	return o
}

// SetPeriodFrom adds the periodFrom to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetPeriodFrom(periodFrom *strfmt.DateTime) {
	o.PeriodFrom = periodFrom
}

// WithPeriodTo adds the periodTo to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithPeriodTo(periodTo *strfmt.DateTime) *ListConsumptionForAnElectricityMeterParams {
	o.SetPeriodTo(periodTo)
	return o
}

// SetPeriodTo adds the periodTo to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetPeriodTo(periodTo *strfmt.DateTime) {
	o.PeriodTo = periodTo
}

// WithSerialNumber adds the serialNumber to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) WithSerialNumber(serialNumber string) *ListConsumptionForAnElectricityMeterParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the list consumption for an electricity meter params
func (o *ListConsumptionForAnElectricityMeterParams) SetSerialNumber(serialNumber string) {
	o.SerialNumber = serialNumber
}

// WriteToRequest writes these params to a swagger request
func (o *ListConsumptionForAnElectricityMeterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GroupBy != nil {

		// query param group_by
		var qrGroupBy string

		if o.GroupBy != nil {
			qrGroupBy = *o.GroupBy
		}
		qGroupBy := qrGroupBy
		if qGroupBy != "" {

			if err := r.SetQueryParam("group_by", qGroupBy); err != nil {
				return err
			}
		}
	}

	// path param mpan
	if err := r.SetPathParam("mpan", o.Mpan); err != nil {
		return err
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PeriodFrom != nil {

		// query param period_from
		var qrPeriodFrom strfmt.DateTime

		if o.PeriodFrom != nil {
			qrPeriodFrom = *o.PeriodFrom
		}
		qPeriodFrom := qrPeriodFrom.String()
		if qPeriodFrom != "" {

			if err := r.SetQueryParam("period_from", qPeriodFrom); err != nil {
				return err
			}
		}
	}

	if o.PeriodTo != nil {

		// query param period_to
		var qrPeriodTo strfmt.DateTime

		if o.PeriodTo != nil {
			qrPeriodTo = *o.PeriodTo
		}
		qPeriodTo := qrPeriodTo.String()
		if qPeriodTo != "" {

			if err := r.SetQueryParam("period_to", qPeriodTo); err != nil {
				return err
			}
		}
	}

	// path param serial_number
	if err := r.SetPathParam("serial_number", o.SerialNumber); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
