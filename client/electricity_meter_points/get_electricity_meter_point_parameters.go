// Code generated by go-swagger; DO NOT EDIT.

package electricity_meter_points

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetElectricityMeterPointParams creates a new GetElectricityMeterPointParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetElectricityMeterPointParams() *GetElectricityMeterPointParams {
	return &GetElectricityMeterPointParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetElectricityMeterPointParamsWithTimeout creates a new GetElectricityMeterPointParams object
// with the ability to set a timeout on a request.
func NewGetElectricityMeterPointParamsWithTimeout(timeout time.Duration) *GetElectricityMeterPointParams {
	return &GetElectricityMeterPointParams{
		timeout: timeout,
	}
}

// NewGetElectricityMeterPointParamsWithContext creates a new GetElectricityMeterPointParams object
// with the ability to set a context for a request.
func NewGetElectricityMeterPointParamsWithContext(ctx context.Context) *GetElectricityMeterPointParams {
	return &GetElectricityMeterPointParams{
		Context: ctx,
	}
}

// NewGetElectricityMeterPointParamsWithHTTPClient creates a new GetElectricityMeterPointParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetElectricityMeterPointParamsWithHTTPClient(client *http.Client) *GetElectricityMeterPointParams {
	return &GetElectricityMeterPointParams{
		HTTPClient: client,
	}
}

/*
GetElectricityMeterPointParams contains all the parameters to send to the API endpoint

	for the get electricity meter point operation.

	Typically these are written to a http.Request.
*/
type GetElectricityMeterPointParams struct {

	// Mpan.
	Mpan string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get electricity meter point params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetElectricityMeterPointParams) WithDefaults() *GetElectricityMeterPointParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get electricity meter point params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetElectricityMeterPointParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get electricity meter point params
func (o *GetElectricityMeterPointParams) WithTimeout(timeout time.Duration) *GetElectricityMeterPointParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get electricity meter point params
func (o *GetElectricityMeterPointParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get electricity meter point params
func (o *GetElectricityMeterPointParams) WithContext(ctx context.Context) *GetElectricityMeterPointParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get electricity meter point params
func (o *GetElectricityMeterPointParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get electricity meter point params
func (o *GetElectricityMeterPointParams) WithHTTPClient(client *http.Client) *GetElectricityMeterPointParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get electricity meter point params
func (o *GetElectricityMeterPointParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMpan adds the mpan to the get electricity meter point params
func (o *GetElectricityMeterPointParams) WithMpan(mpan string) *GetElectricityMeterPointParams {
	o.SetMpan(mpan)
	return o
}

// SetMpan adds the mpan to the get electricity meter point params
func (o *GetElectricityMeterPointParams) SetMpan(mpan string) {
	o.Mpan = mpan
}

// WriteToRequest writes these params to a swagger request
func (o *GetElectricityMeterPointParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param mpan
	if err := r.SetPathParam("mpan", o.Mpan); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
