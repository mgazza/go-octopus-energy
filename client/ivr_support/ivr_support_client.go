// Code generated by go-swagger; DO NOT EDIT.

package ivr_support

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new ivr support API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new ivr support API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new ivr support API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for ivr support API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MinimalTwilioEnqueue(params *MinimalTwilioEnqueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MinimalTwilioEnqueueOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	MinimalTwilioEnqueue Enqueue a call from Twilio with the fewest steps.

Designed to point phone numbers at when Studio is unavailable.
May also be useful to mitigate other types of incident.
Performs the minimal amount of work to enqueue a call, storing a record of it.
As such, non-essential work is omitted.
*/
func (a *Client) MinimalTwilioEnqueue(params *MinimalTwilioEnqueueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MinimalTwilioEnqueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMinimalTwilioEnqueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Minimal Twilio Enqueue",
		Method:             "POST",
		PathPattern:        "/v1/ivr-support/minimal-enqueue-for-incidents/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MinimalTwilioEnqueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MinimalTwilioEnqueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Minimal Twilio Enqueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
