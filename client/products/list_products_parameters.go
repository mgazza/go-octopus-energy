// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListProductsParams creates a new ListProductsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListProductsParams() *ListProductsParams {
	return &ListProductsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListProductsParamsWithTimeout creates a new ListProductsParams object
// with the ability to set a timeout on a request.
func NewListProductsParamsWithTimeout(timeout time.Duration) *ListProductsParams {
	return &ListProductsParams{
		timeout: timeout,
	}
}

// NewListProductsParamsWithContext creates a new ListProductsParams object
// with the ability to set a context for a request.
func NewListProductsParamsWithContext(ctx context.Context) *ListProductsParams {
	return &ListProductsParams{
		Context: ctx,
	}
}

// NewListProductsParamsWithHTTPClient creates a new ListProductsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListProductsParamsWithHTTPClient(client *http.Client) *ListProductsParams {
	return &ListProductsParams{
		HTTPClient: client,
	}
}

/*
ListProductsParams contains all the parameters to send to the API endpoint

	for the list products operation.

	Typically these are written to a http.Request.
*/
type ListProductsParams struct {

	/* AvailableAt.

	   Show products available for new agreements on the given datetime. Defaults to current datetime, effectively showing products that are currently available.

	   Format: date-time
	*/
	AvailableAt *strfmt.DateTime

	// Brand.
	Brand *string

	/* IsBusiness.

	   Show only business products
	*/
	IsBusiness *bool

	/* IsGreen.

	   Show only green products
	*/
	IsGreen *bool

	// IsHistorical.
	IsHistorical *bool

	/* IsPrepay.

	   Show only pre-pay products
	*/
	IsPrepay *bool

	/* IsTracker.

	   Show only tracker products
	*/
	IsTracker *bool

	/* IsVariable.

	   Show only variable products
	*/
	IsVariable *bool

	/* Page.

	   A page number within the paginated result set.
	*/
	Page *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list products params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProductsParams) WithDefaults() *ListProductsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list products params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListProductsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list products params
func (o *ListProductsParams) WithTimeout(timeout time.Duration) *ListProductsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list products params
func (o *ListProductsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list products params
func (o *ListProductsParams) WithContext(ctx context.Context) *ListProductsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list products params
func (o *ListProductsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list products params
func (o *ListProductsParams) WithHTTPClient(client *http.Client) *ListProductsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list products params
func (o *ListProductsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAvailableAt adds the availableAt to the list products params
func (o *ListProductsParams) WithAvailableAt(availableAt *strfmt.DateTime) *ListProductsParams {
	o.SetAvailableAt(availableAt)
	return o
}

// SetAvailableAt adds the availableAt to the list products params
func (o *ListProductsParams) SetAvailableAt(availableAt *strfmt.DateTime) {
	o.AvailableAt = availableAt
}

// WithBrand adds the brand to the list products params
func (o *ListProductsParams) WithBrand(brand *string) *ListProductsParams {
	o.SetBrand(brand)
	return o
}

// SetBrand adds the brand to the list products params
func (o *ListProductsParams) SetBrand(brand *string) {
	o.Brand = brand
}

// WithIsBusiness adds the isBusiness to the list products params
func (o *ListProductsParams) WithIsBusiness(isBusiness *bool) *ListProductsParams {
	o.SetIsBusiness(isBusiness)
	return o
}

// SetIsBusiness adds the isBusiness to the list products params
func (o *ListProductsParams) SetIsBusiness(isBusiness *bool) {
	o.IsBusiness = isBusiness
}

// WithIsGreen adds the isGreen to the list products params
func (o *ListProductsParams) WithIsGreen(isGreen *bool) *ListProductsParams {
	o.SetIsGreen(isGreen)
	return o
}

// SetIsGreen adds the isGreen to the list products params
func (o *ListProductsParams) SetIsGreen(isGreen *bool) {
	o.IsGreen = isGreen
}

// WithIsHistorical adds the isHistorical to the list products params
func (o *ListProductsParams) WithIsHistorical(isHistorical *bool) *ListProductsParams {
	o.SetIsHistorical(isHistorical)
	return o
}

// SetIsHistorical adds the isHistorical to the list products params
func (o *ListProductsParams) SetIsHistorical(isHistorical *bool) {
	o.IsHistorical = isHistorical
}

// WithIsPrepay adds the isPrepay to the list products params
func (o *ListProductsParams) WithIsPrepay(isPrepay *bool) *ListProductsParams {
	o.SetIsPrepay(isPrepay)
	return o
}

// SetIsPrepay adds the isPrepay to the list products params
func (o *ListProductsParams) SetIsPrepay(isPrepay *bool) {
	o.IsPrepay = isPrepay
}

// WithIsTracker adds the isTracker to the list products params
func (o *ListProductsParams) WithIsTracker(isTracker *bool) *ListProductsParams {
	o.SetIsTracker(isTracker)
	return o
}

// SetIsTracker adds the isTracker to the list products params
func (o *ListProductsParams) SetIsTracker(isTracker *bool) {
	o.IsTracker = isTracker
}

// WithIsVariable adds the isVariable to the list products params
func (o *ListProductsParams) WithIsVariable(isVariable *bool) *ListProductsParams {
	o.SetIsVariable(isVariable)
	return o
}

// SetIsVariable adds the isVariable to the list products params
func (o *ListProductsParams) SetIsVariable(isVariable *bool) {
	o.IsVariable = isVariable
}

// WithPage adds the page to the list products params
func (o *ListProductsParams) WithPage(page *int64) *ListProductsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list products params
func (o *ListProductsParams) SetPage(page *int64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *ListProductsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AvailableAt != nil {

		// query param available_at
		var qrAvailableAt strfmt.DateTime

		if o.AvailableAt != nil {
			qrAvailableAt = *o.AvailableAt
		}
		qAvailableAt := qrAvailableAt.String()
		if qAvailableAt != "" {

			if err := r.SetQueryParam("available_at", qAvailableAt); err != nil {
				return err
			}
		}
	}

	if o.Brand != nil {

		// query param brand
		var qrBrand string

		if o.Brand != nil {
			qrBrand = *o.Brand
		}
		qBrand := qrBrand
		if qBrand != "" {

			if err := r.SetQueryParam("brand", qBrand); err != nil {
				return err
			}
		}
	}

	if o.IsBusiness != nil {

		// query param is_business
		var qrIsBusiness bool

		if o.IsBusiness != nil {
			qrIsBusiness = *o.IsBusiness
		}
		qIsBusiness := swag.FormatBool(qrIsBusiness)
		if qIsBusiness != "" {

			if err := r.SetQueryParam("is_business", qIsBusiness); err != nil {
				return err
			}
		}
	}

	if o.IsGreen != nil {

		// query param is_green
		var qrIsGreen bool

		if o.IsGreen != nil {
			qrIsGreen = *o.IsGreen
		}
		qIsGreen := swag.FormatBool(qrIsGreen)
		if qIsGreen != "" {

			if err := r.SetQueryParam("is_green", qIsGreen); err != nil {
				return err
			}
		}
	}

	if o.IsHistorical != nil {

		// query param is_historical
		var qrIsHistorical bool

		if o.IsHistorical != nil {
			qrIsHistorical = *o.IsHistorical
		}
		qIsHistorical := swag.FormatBool(qrIsHistorical)
		if qIsHistorical != "" {

			if err := r.SetQueryParam("is_historical", qIsHistorical); err != nil {
				return err
			}
		}
	}

	if o.IsPrepay != nil {

		// query param is_prepay
		var qrIsPrepay bool

		if o.IsPrepay != nil {
			qrIsPrepay = *o.IsPrepay
		}
		qIsPrepay := swag.FormatBool(qrIsPrepay)
		if qIsPrepay != "" {

			if err := r.SetQueryParam("is_prepay", qIsPrepay); err != nil {
				return err
			}
		}
	}

	if o.IsTracker != nil {

		// query param is_tracker
		var qrIsTracker bool

		if o.IsTracker != nil {
			qrIsTracker = *o.IsTracker
		}
		qIsTracker := swag.FormatBool(qrIsTracker)
		if qIsTracker != "" {

			if err := r.SetQueryParam("is_tracker", qIsTracker); err != nil {
				return err
			}
		}
	}

	if o.IsVariable != nil {

		// query param is_variable
		var qrIsVariable bool

		if o.IsVariable != nil {
			qrIsVariable = *o.IsVariable
		}
		qIsVariable := swag.FormatBool(qrIsVariable)
		if qIsVariable != "" {

			if err := r.SetQueryParam("is_variable", qIsVariable); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
