// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Business business
//
// swagger:model Business
type Business struct {

	// The estimated annual turnover
	//
	// In pounds Â£ (GBP)
	// Minimum: 0
	AnnualTurnover *int64 `json:"annual_turnover,omitempty"`

	// * `SOLE_TRADER` - SOLE_TRADER
	// * `LIMITED` - LIMITED
	// * `CHARITY` - CHARITY
	// * `PARTNERSHIP` - PARTNERSHIP
	// * `GOVERNMENT` - GOVERNMENT
	// Required: true
	// Enum: ["SOLE_TRADER","LIMITED","CHARITY","PARTNERSHIP","GOVERNMENT"]
	BusinessType *string `json:"business_type"`

	// The head count of the business, i.e. number of staff.
	// Minimum: 0
	HeadCount *int64 `json:"head_count,omitempty"`

	// Whether the business is exempt from paying CCL (Climate Change Levy).
	// Required: true
	IsCclExempt *bool `json:"is_ccl_exempt"`

	// Whether the business is exempt from paying VAT.
	// Required: true
	IsVatExempt *bool `json:"is_vat_exempt"`

	// The name of the business.
	// Required: true
	// Max Length: 255
	Name *string `json:"name"`

	// The registered number of the business.
	//
	// This field is required for 'LIMITED' businesses.</p>
	// Max Length: 8
	Number string `json:"number,omitempty"`
}

// Validate validates this business
func (m *Business) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnualTurnover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCclExempt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsVatExempt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Business) validateAnnualTurnover(formats strfmt.Registry) error {
	if swag.IsZero(m.AnnualTurnover) { // not required
		return nil
	}

	if err := validate.MinimumInt("annual_turnover", "body", *m.AnnualTurnover, 0, false); err != nil {
		return err
	}

	return nil
}

var businessTypeBusinessTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SOLE_TRADER","LIMITED","CHARITY","PARTNERSHIP","GOVERNMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		businessTypeBusinessTypePropEnum = append(businessTypeBusinessTypePropEnum, v)
	}
}

const (

	// BusinessBusinessTypeSOLETRADER captures enum value "SOLE_TRADER"
	BusinessBusinessTypeSOLETRADER string = "SOLE_TRADER"

	// BusinessBusinessTypeLIMITED captures enum value "LIMITED"
	BusinessBusinessTypeLIMITED string = "LIMITED"

	// BusinessBusinessTypeCHARITY captures enum value "CHARITY"
	BusinessBusinessTypeCHARITY string = "CHARITY"

	// BusinessBusinessTypePARTNERSHIP captures enum value "PARTNERSHIP"
	BusinessBusinessTypePARTNERSHIP string = "PARTNERSHIP"

	// BusinessBusinessTypeGOVERNMENT captures enum value "GOVERNMENT"
	BusinessBusinessTypeGOVERNMENT string = "GOVERNMENT"
)

// prop value enum
func (m *Business) validateBusinessTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, businessTypeBusinessTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Business) validateBusinessType(formats strfmt.Registry) error {

	if err := validate.Required("business_type", "body", m.BusinessType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBusinessTypeEnum("business_type", "body", *m.BusinessType); err != nil {
		return err
	}

	return nil
}

func (m *Business) validateHeadCount(formats strfmt.Registry) error {
	if swag.IsZero(m.HeadCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("head_count", "body", *m.HeadCount, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Business) validateIsCclExempt(formats strfmt.Registry) error {

	if err := validate.Required("is_ccl_exempt", "body", m.IsCclExempt); err != nil {
		return err
	}

	return nil
}

func (m *Business) validateIsVatExempt(formats strfmt.Registry) error {

	if err := validate.Required("is_vat_exempt", "body", m.IsVatExempt); err != nil {
		return err
	}

	return nil
}

func (m *Business) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 255); err != nil {
		return err
	}

	return nil
}

func (m *Business) validateNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("number", "body", m.Number, 8); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this business based on context it is used
func (m *Business) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Business) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Business) UnmarshalBinary(b []byte) error {
	var res Business
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
