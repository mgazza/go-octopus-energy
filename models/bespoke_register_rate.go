// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BespokeRegisterRate bespoke register rate
//
// swagger:model _BespokeRegisterRate
type BespokeRegisterRate struct {

	// The value in pence per kWh of the charge (excluding VAT).
	//
	// This field should be used for gas meters.
	//
	// * `DD` - DD
	// * `NDD` - NDD
	// * `PP` - PP
	// Enum: ["DD","NDD","PP"]
	PaymentMethod string `json:"payment_method,omitempty"`

	// The rate type of the unit rate.
	//
	// If the register_identifier is not provided, the rate type must be provided instead.
	//
	// * `STANDARD` - Standard rate (pence per kWh)
	// * `ECO7_DAY` - Day (or peak) rate (pence per kWh)
	// * `ECO7_NIGHT` - Night (or off-peak) rate (pence per kWh)
	// * `OFF_PEAK` - Additional off-peak rate for three-rate tariffs (pence per kWh)
	// * `SUMMER_PEAK` - Summer peak rate (pence per kWh) for two-rate tariffs
	// * `SUMMER_OFF_PEAK` - Summer off-peak rate (pence per kWh) for two-rate tariffs
	// * `WINTER_PEAK` - Winter peak rate (pence per kWh) for two-rate tariffs
	// * `WINTER_OFF_PEAK` - Winter off-peak rate (pence per kWh) for two-rate tariffs
	// * `NUCLEAR_RAB` - Nuclear RAB rate (pence per day) for business tariffs
	// * `TNUOS` - TNUoS rate (pence per day) for business tariffs
	// * `CAPACITY_MARKET` - Capacity Market rate (pence per day) for business tariffs
	// * `EV_DEVICE` - Electric vehicle device rate (pence per kWh) for sub-meter billing
	// Enum: ["STANDARD","ECO7_DAY","ECO7_NIGHT","OFF_PEAK","SUMMER_PEAK","SUMMER_OFF_PEAK","WINTER_PEAK","WINTER_OFF_PEAK","NUCLEAR_RAB","TNUOS","CAPACITY_MARKET","EV_DEVICE"]
	RateType string `json:"rate_type,omitempty"`

	// The identifier of the register to which this unit rate applies.
	// Max Length: 32
	RegisterIdentifier string `json:"register_identifier,omitempty"`

	// The value in pence per kWh of the charge (excluding VAT).
	//
	// This field should be used for gas meters.
	// Required: true
	// Pattern: ^-?\d{0,7}(?:\.\d{0,5})?$
	UnitRate *string `json:"unit_rate"`
}

// Validate validates this bespoke register rate
func (m *BespokeRegisterRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisterIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bespokeRegisterRateTypePaymentMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DD","NDD","PP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bespokeRegisterRateTypePaymentMethodPropEnum = append(bespokeRegisterRateTypePaymentMethodPropEnum, v)
	}
}

const (

	// BespokeRegisterRatePaymentMethodDD captures enum value "DD"
	BespokeRegisterRatePaymentMethodDD string = "DD"

	// BespokeRegisterRatePaymentMethodNDD captures enum value "NDD"
	BespokeRegisterRatePaymentMethodNDD string = "NDD"

	// BespokeRegisterRatePaymentMethodPP captures enum value "PP"
	BespokeRegisterRatePaymentMethodPP string = "PP"
)

// prop value enum
func (m *BespokeRegisterRate) validatePaymentMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bespokeRegisterRateTypePaymentMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BespokeRegisterRate) validatePaymentMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentMethodEnum("payment_method", "body", m.PaymentMethod); err != nil {
		return err
	}

	return nil
}

var bespokeRegisterRateTypeRateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STANDARD","ECO7_DAY","ECO7_NIGHT","OFF_PEAK","SUMMER_PEAK","SUMMER_OFF_PEAK","WINTER_PEAK","WINTER_OFF_PEAK","NUCLEAR_RAB","TNUOS","CAPACITY_MARKET","EV_DEVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bespokeRegisterRateTypeRateTypePropEnum = append(bespokeRegisterRateTypeRateTypePropEnum, v)
	}
}

const (

	// BespokeRegisterRateRateTypeSTANDARD captures enum value "STANDARD"
	BespokeRegisterRateRateTypeSTANDARD string = "STANDARD"

	// BespokeRegisterRateRateTypeECO7DAY captures enum value "ECO7_DAY"
	BespokeRegisterRateRateTypeECO7DAY string = "ECO7_DAY"

	// BespokeRegisterRateRateTypeECO7NIGHT captures enum value "ECO7_NIGHT"
	BespokeRegisterRateRateTypeECO7NIGHT string = "ECO7_NIGHT"

	// BespokeRegisterRateRateTypeOFFPEAK captures enum value "OFF_PEAK"
	BespokeRegisterRateRateTypeOFFPEAK string = "OFF_PEAK"

	// BespokeRegisterRateRateTypeSUMMERPEAK captures enum value "SUMMER_PEAK"
	BespokeRegisterRateRateTypeSUMMERPEAK string = "SUMMER_PEAK"

	// BespokeRegisterRateRateTypeSUMMEROFFPEAK captures enum value "SUMMER_OFF_PEAK"
	BespokeRegisterRateRateTypeSUMMEROFFPEAK string = "SUMMER_OFF_PEAK"

	// BespokeRegisterRateRateTypeWINTERPEAK captures enum value "WINTER_PEAK"
	BespokeRegisterRateRateTypeWINTERPEAK string = "WINTER_PEAK"

	// BespokeRegisterRateRateTypeWINTEROFFPEAK captures enum value "WINTER_OFF_PEAK"
	BespokeRegisterRateRateTypeWINTEROFFPEAK string = "WINTER_OFF_PEAK"

	// BespokeRegisterRateRateTypeNUCLEARRAB captures enum value "NUCLEAR_RAB"
	BespokeRegisterRateRateTypeNUCLEARRAB string = "NUCLEAR_RAB"

	// BespokeRegisterRateRateTypeTNUOS captures enum value "TNUOS"
	BespokeRegisterRateRateTypeTNUOS string = "TNUOS"

	// BespokeRegisterRateRateTypeCAPACITYMARKET captures enum value "CAPACITY_MARKET"
	BespokeRegisterRateRateTypeCAPACITYMARKET string = "CAPACITY_MARKET"

	// BespokeRegisterRateRateTypeEVDEVICE captures enum value "EV_DEVICE"
	BespokeRegisterRateRateTypeEVDEVICE string = "EV_DEVICE"
)

// prop value enum
func (m *BespokeRegisterRate) validateRateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bespokeRegisterRateTypeRateTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BespokeRegisterRate) validateRateType(formats strfmt.Registry) error {
	if swag.IsZero(m.RateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRateTypeEnum("rate_type", "body", m.RateType); err != nil {
		return err
	}

	return nil
}

func (m *BespokeRegisterRate) validateRegisterIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisterIdentifier) { // not required
		return nil
	}

	if err := validate.MaxLength("register_identifier", "body", m.RegisterIdentifier, 32); err != nil {
		return err
	}

	return nil
}

func (m *BespokeRegisterRate) validateUnitRate(formats strfmt.Registry) error {

	if err := validate.Required("unit_rate", "body", m.UnitRate); err != nil {
		return err
	}

	if err := validate.Pattern("unit_rate", "body", *m.UnitRate, `^-?\d{0,7}(?:\.\d{0,5})?$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this bespoke register rate based on context it is used
func (m *BespokeRegisterRate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BespokeRegisterRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BespokeRegisterRate) UnmarshalBinary(b []byte) error {
	var res BespokeRegisterRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
