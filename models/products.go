// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Products products
//
// swagger:model Products
type Products struct {

	// available from
	// Required: true
	// Format: date-time
	AvailableFrom *strfmt.DateTime `json:"available_from"`

	// available to
	// Format: date-time
	AvailableTo *strfmt.DateTime `json:"available_to,omitempty"`

	// brand
	// Required: true
	// Read Only: true
	Brand string `json:"brand"`

	// code
	// Required: true
	// Max Length: 128
	Code *string `json:"code"`

	// This will be shown to customers during sign-up
	// Required: true
	Description *string `json:"description"`

	// * `IMPORT` - Import
	// * `EXPORT` - Export
	// Enum: ["IMPORT","EXPORT"]
	Direction string `json:"direction,omitempty"`

	// This name will be shown to customers during sign-up
	// Required: true
	// Max Length: 255
	DisplayName *string `json:"display_name"`

	// full name
	// Required: true
	// Max Length: 255
	FullName *string `json:"full_name"`

	// Is a business product?
	IsBusiness bool `json:"is_business,omitempty"`

	// Is a green product?
	IsGreen bool `json:"is_green,omitempty"`

	// is prepay
	IsPrepay bool `json:"is_prepay,omitempty"`

	// is restricted
	// Required: true
	// Read Only: true
	IsRestricted bool `json:"is_restricted"`

	// Is a tracker product?
	IsTracker bool `json:"is_tracker,omitempty"`

	// Is variable?
	IsVariable bool `json:"is_variable,omitempty"`

	// Historical charges can be browsed using the provided URLs.
	// Required: true
	// Read Only: true
	Links []*Link `json:"links"`

	// Duration of agreements using this product in months
	// Maximum: 2.147483647e+09
	// Minimum: 0
	Term *int64 `json:"term,omitempty"`
}

// Validate validates this products
func (m *Products) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRestricted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Products) validateAvailableFrom(formats strfmt.Registry) error {

	if err := validate.Required("available_from", "body", m.AvailableFrom); err != nil {
		return err
	}

	if err := validate.FormatOf("available_from", "body", "date-time", m.AvailableFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateAvailableTo(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableTo) { // not required
		return nil
	}

	if err := validate.FormatOf("available_to", "body", "date-time", m.AvailableTo.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateBrand(formats strfmt.Registry) error {

	if err := validate.RequiredString("brand", "body", m.Brand); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.MaxLength("code", "body", *m.Code, 128); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var productsTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IMPORT","EXPORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productsTypeDirectionPropEnum = append(productsTypeDirectionPropEnum, v)
	}
}

const (

	// ProductsDirectionIMPORT captures enum value "IMPORT"
	ProductsDirectionIMPORT string = "IMPORT"

	// ProductsDirectionEXPORT captures enum value "EXPORT"
	ProductsDirectionEXPORT string = "EXPORT"
)

// prop value enum
func (m *Products) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productsTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Products) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MaxLength("display_name", "body", *m.DisplayName, 255); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("full_name", "body", m.FullName); err != nil {
		return err
	}

	if err := validate.MaxLength("full_name", "body", *m.FullName, 255); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateIsRestricted(formats strfmt.Registry) error {

	if err := validate.Required("is_restricted", "body", bool(m.IsRestricted)); err != nil {
		return err
	}

	return nil
}

func (m *Products) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Products) validateTerm(formats strfmt.Registry) error {
	if swag.IsZero(m.Term) { // not required
		return nil
	}

	if err := validate.MinimumInt("term", "body", *m.Term, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("term", "body", *m.Term, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this products based on the context it is used
func (m *Products) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsRestricted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Products) contextValidateBrand(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "brand", "body", string(m.Brand)); err != nil {
		return err
	}

	return nil
}

func (m *Products) contextValidateIsRestricted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_restricted", "body", bool(m.IsRestricted)); err != nil {
		return err
	}

	return nil
}

func (m *Products) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "links", "body", []*Link(m.Links)); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {

			if swag.IsZero(m.Links[i]) { // not required
				return nil
			}

			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Products) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Products) UnmarshalBinary(b []byte) error {
	var res Products
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
