// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BespokeTariffRate bespoke tariff rate
//
// swagger:model _BespokeTariffRate
type BespokeTariffRate struct {

	// Meter serial number to which the bespoke tariff applies
	// Required: true
	// Max Length: 32
	MeterSerialNumber *string `json:"meter_serial_number"`

	// For elec meters, the unit rates are provided on a per register basis in this array.
	Registers []*BespokeRegisterRate `json:"registers"`

	// The value in pence per day of the charge (excluding VAT).
	// Required: true
	// Pattern: ^-?\d{0,7}(?:\.\d{0,5})?$
	StandingCharge *string `json:"standing_charge"`

	// The value in pence per kWh of the charge (excluding VAT).
	//
	// This field should be used for gas meters.
	// Pattern: ^-?\d{0,7}(?:\.\d{0,5})?$
	UnitRate string `json:"unit_rate,omitempty"`
}

// Validate validates this bespoke tariff rate
func (m *BespokeTariffRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeterSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandingCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BespokeTariffRate) validateMeterSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("meter_serial_number", "body", m.MeterSerialNumber); err != nil {
		return err
	}

	if err := validate.MaxLength("meter_serial_number", "body", *m.MeterSerialNumber, 32); err != nil {
		return err
	}

	return nil
}

func (m *BespokeTariffRate) validateRegisters(formats strfmt.Registry) error {
	if swag.IsZero(m.Registers) { // not required
		return nil
	}

	for i := 0; i < len(m.Registers); i++ {
		if swag.IsZero(m.Registers[i]) { // not required
			continue
		}

		if m.Registers[i] != nil {
			if err := m.Registers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BespokeTariffRate) validateStandingCharge(formats strfmt.Registry) error {

	if err := validate.Required("standing_charge", "body", m.StandingCharge); err != nil {
		return err
	}

	if err := validate.Pattern("standing_charge", "body", *m.StandingCharge, `^-?\d{0,7}(?:\.\d{0,5})?$`); err != nil {
		return err
	}

	return nil
}

func (m *BespokeTariffRate) validateUnitRate(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitRate) { // not required
		return nil
	}

	if err := validate.Pattern("unit_rate", "body", m.UnitRate, `^-?\d{0,7}(?:\.\d{0,5})?$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this bespoke tariff rate based on the context it is used
func (m *BespokeTariffRate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegisters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BespokeTariffRate) contextValidateRegisters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Registers); i++ {

		if m.Registers[i] != nil {

			if swag.IsZero(m.Registers[i]) { // not required
				return nil
			}

			if err := m.Registers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BespokeTariffRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BespokeTariffRate) UnmarshalBinary(b []byte) error {
	var res BespokeTariffRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
