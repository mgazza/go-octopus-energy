// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment payment
//
// swagger:model Payment
type Payment struct {

	// The name associated with the bank account.
	// Max Length: 255
	// Min Length: 3
	AccountName string `json:"account_name,omitempty"`

	// The bank account number.
	AccountNumber string `json:"account_number,omitempty"`

	// The bank account sort code.
	AccountSortCode string `json:"account_sort_code,omitempty"`

	// The number of days to delay the payment for a bill triggered schedule.
	// Maximum: 90
	// Minimum: 5
	DelayDays int64 `json:"delay_days,omitempty"`

	// * `MONTHLY_DIRECT_DEBIT` - Monthly Direct Debit
	// * `MONTHLY_DIRECT_PAYMENT` - POROB schedule, payment initiated by the customer
	// * `BILL_TRIGGERED_DIRECT_DEBIT` - POROB Direct Debit Schedule
	// Required: true
	// Enum: ["MONTHLY_DIRECT_DEBIT","MONTHLY_DIRECT_PAYMENT","BILL_TRIGGERED_DIRECT_DEBIT"]
	Method *string `json:"method"`

	// The preferred day of the month for the payment request.
	//
	// Only required for 'MONTHLY_DIRECT_DEBIT' schedules.
	// Maximum: 28
	// Minimum: 1
	PaymentDay int64 `json:"payment_day,omitempty"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelayDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateAccountName(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountName) { // not required
		return nil
	}

	if err := validate.MinLength("account_name", "body", m.AccountName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("account_name", "body", m.AccountName, 255); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateDelayDays(formats strfmt.Registry) error {
	if swag.IsZero(m.DelayDays) { // not required
		return nil
	}

	if err := validate.MinimumInt("delay_days", "body", m.DelayDays, 5, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("delay_days", "body", m.DelayDays, 90, false); err != nil {
		return err
	}

	return nil
}

var paymentTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONTHLY_DIRECT_DEBIT","MONTHLY_DIRECT_PAYMENT","BILL_TRIGGERED_DIRECT_DEBIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTypeMethodPropEnum = append(paymentTypeMethodPropEnum, v)
	}
}

const (

	// PaymentMethodMONTHLYDIRECTDEBIT captures enum value "MONTHLY_DIRECT_DEBIT"
	PaymentMethodMONTHLYDIRECTDEBIT string = "MONTHLY_DIRECT_DEBIT"

	// PaymentMethodMONTHLYDIRECTPAYMENT captures enum value "MONTHLY_DIRECT_PAYMENT"
	PaymentMethodMONTHLYDIRECTPAYMENT string = "MONTHLY_DIRECT_PAYMENT"

	// PaymentMethodBILLTRIGGEREDDIRECTDEBIT captures enum value "BILL_TRIGGERED_DIRECT_DEBIT"
	PaymentMethodBILLTRIGGEREDDIRECTDEBIT string = "BILL_TRIGGERED_DIRECT_DEBIT"
)

// prop value enum
func (m *Payment) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentDay(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentDay) { // not required
		return nil
	}

	if err := validate.MinimumInt("payment_day", "body", m.PaymentDay, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("payment_day", "body", m.PaymentDay, 28, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this payment based on context it is used
func (m *Payment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
