// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreditScoreData credit score data
//
// swagger:model CreditScoreData
type CreditScoreData struct {

	// * `LOW` - Low
	// * `MID` - Medium
	// * `HIGH` - High
	// * `UNKNOWN` - Unknown
	// Enum: ["LOW","MID","HIGH","UNKNOWN"]
	RiskBracket string `json:"risk_bracket,omitempty"`

	// score
	// Maximum: 9999
	// Minimum: 0
	Score *int64 `json:"score,omitempty"`
}

// Validate validates this credit score data
func (m *CreditScoreData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRiskBracket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var creditScoreDataTypeRiskBracketPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOW","MID","HIGH","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditScoreDataTypeRiskBracketPropEnum = append(creditScoreDataTypeRiskBracketPropEnum, v)
	}
}

const (

	// CreditScoreDataRiskBracketLOW captures enum value "LOW"
	CreditScoreDataRiskBracketLOW string = "LOW"

	// CreditScoreDataRiskBracketMID captures enum value "MID"
	CreditScoreDataRiskBracketMID string = "MID"

	// CreditScoreDataRiskBracketHIGH captures enum value "HIGH"
	CreditScoreDataRiskBracketHIGH string = "HIGH"

	// CreditScoreDataRiskBracketUNKNOWN captures enum value "UNKNOWN"
	CreditScoreDataRiskBracketUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *CreditScoreData) validateRiskBracketEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, creditScoreDataTypeRiskBracketPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreditScoreData) validateRiskBracket(formats strfmt.Registry) error {
	if swag.IsZero(m.RiskBracket) { // not required
		return nil
	}

	// value enum
	if err := m.validateRiskBracketEnum("risk_bracket", "body", m.RiskBracket); err != nil {
		return err
	}

	return nil
}

func (m *CreditScoreData) validateScore(formats strfmt.Registry) error {
	if swag.IsZero(m.Score) { // not required
		return nil
	}

	if err := validate.MinimumInt("score", "body", *m.Score, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("score", "body", *m.Score, 9999, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credit score data based on context it is used
func (m *CreditScoreData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreditScoreData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditScoreData) UnmarshalBinary(b []byte) error {
	var res CreditScoreData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
