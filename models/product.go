// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Product product
//
// swagger:model Product
type Product struct {

	// available from
	// Required: true
	// Format: date-time
	AvailableFrom *strfmt.DateTime `json:"available_from"`

	// available to
	// Format: date-time
	AvailableTo *strfmt.DateTime `json:"available_to,omitempty"`

	// brand
	// Required: true
	// Read Only: true
	Brand string `json:"brand"`

	// code
	// Required: true
	// Max Length: 128
	Code *string `json:"code"`

	// This will be shown to customers during sign-up
	// Required: true
	Description *string `json:"description"`

	// This name will be shown to customers during sign-up
	// Required: true
	// Max Length: 255
	DisplayName *string `json:"display_name"`

	// dual register electricity tariffs
	// Required: true
	// Read Only: true
	DualRegisterElectricityTariffs map[string]map[string]ProductDualRegisterElectricityTariffsAnon `json:"dual_register_electricity_tariffs"`

	// full name
	// Required: true
	// Max Length: 255
	FullName *string `json:"full_name"`

	// Is a business product?
	IsBusiness bool `json:"is_business,omitempty"`

	// Is a green product?
	IsGreen bool `json:"is_green,omitempty"`

	// is prepay
	IsPrepay bool `json:"is_prepay,omitempty"`

	// is restricted
	// Required: true
	// Read Only: true
	IsRestricted bool `json:"is_restricted"`

	// Is a tracker product?
	IsTracker bool `json:"is_tracker,omitempty"`

	// Is variable?
	IsVariable bool `json:"is_variable,omitempty"`

	// Historical charges can be browsed using the provided URLs.
	// Required: true
	// Read Only: true
	Links []*Link `json:"links"`

	// sample consumption
	// Required: true
	// Read Only: true
	SampleConsumption struct {
		SampleConsumption
	} `json:"sample_consumption"`

	// sample quotes
	// Required: true
	// Read Only: true
	SampleQuotes struct {
		SampleQuotes
	} `json:"sample_quotes"`

	// single register electricity tariffs
	// Required: true
	// Read Only: true
	SingleRegisterElectricityTariffs map[string]map[string]ProductSingleRegisterElectricityTariffsAnon `json:"single_register_electricity_tariffs"`

	// single register gas tariffs
	// Required: true
	// Read Only: true
	SingleRegisterGasTariffs map[string]map[string]ProductSingleRegisterGasTariffsAnon `json:"single_register_gas_tariffs"`

	// tariffs active at
	// Required: true
	// Read Only: true
	// Format: date-time
	TariffsActiveAt strfmt.DateTime `json:"tariffs_active_at"`

	// Duration of agreements using this product in months
	// Maximum: 2.147483647e+09
	// Minimum: 0
	Term *int64 `json:"term,omitempty"`
}

// Validate validates this product
func (m *Product) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualRegisterElectricityTariffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRestricted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSampleConsumption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSampleQuotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleRegisterElectricityTariffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleRegisterGasTariffs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffsActiveAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) validateAvailableFrom(formats strfmt.Registry) error {

	if err := validate.Required("available_from", "body", m.AvailableFrom); err != nil {
		return err
	}

	if err := validate.FormatOf("available_from", "body", "date-time", m.AvailableFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateAvailableTo(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableTo) { // not required
		return nil
	}

	if err := validate.FormatOf("available_to", "body", "date-time", m.AvailableTo.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateBrand(formats strfmt.Registry) error {

	if err := validate.RequiredString("brand", "body", m.Brand); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.MaxLength("code", "body", *m.Code, 128); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MaxLength("display_name", "body", *m.DisplayName, 255); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateDualRegisterElectricityTariffs(formats strfmt.Registry) error {

	if err := validate.Required("dual_register_electricity_tariffs", "body", m.DualRegisterElectricityTariffs); err != nil {
		return err
	}

	for k := range m.DualRegisterElectricityTariffs {

		if err := validate.Required("dual_register_electricity_tariffs"+"."+k, "body", m.DualRegisterElectricityTariffs[k]); err != nil {
			return err
		}

		if err := validate.Required("dual_register_electricity_tariffs"+"."+k, "body", m.DualRegisterElectricityTariffs[k]); err != nil {
			return err
		}

		for kk := range m.DualRegisterElectricityTariffs[k] {

			if err := validate.Required("dual_register_electricity_tariffs"+"."+k+"."+kk, "body", m.DualRegisterElectricityTariffs[k][kk]); err != nil {
				return err
			}
			if val, ok := m.DualRegisterElectricityTariffs[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("dual_register_electricity_tariffs" + "." + k + "." + kk)
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("dual_register_electricity_tariffs" + "." + k + "." + kk)
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *Product) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("full_name", "body", m.FullName); err != nil {
		return err
	}

	if err := validate.MaxLength("full_name", "body", *m.FullName, 255); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateIsRestricted(formats strfmt.Registry) error {

	if err := validate.Required("is_restricted", "body", bool(m.IsRestricted)); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Product) validateSampleConsumption(formats strfmt.Registry) error {

	return nil
}

func (m *Product) validateSampleQuotes(formats strfmt.Registry) error {

	return nil
}

func (m *Product) validateSingleRegisterElectricityTariffs(formats strfmt.Registry) error {

	if err := validate.Required("single_register_electricity_tariffs", "body", m.SingleRegisterElectricityTariffs); err != nil {
		return err
	}

	for k := range m.SingleRegisterElectricityTariffs {

		if err := validate.Required("single_register_electricity_tariffs"+"."+k, "body", m.SingleRegisterElectricityTariffs[k]); err != nil {
			return err
		}

		if err := validate.Required("single_register_electricity_tariffs"+"."+k, "body", m.SingleRegisterElectricityTariffs[k]); err != nil {
			return err
		}

		for kk := range m.SingleRegisterElectricityTariffs[k] {

			if err := validate.Required("single_register_electricity_tariffs"+"."+k+"."+kk, "body", m.SingleRegisterElectricityTariffs[k][kk]); err != nil {
				return err
			}
			if val, ok := m.SingleRegisterElectricityTariffs[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("single_register_electricity_tariffs" + "." + k + "." + kk)
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("single_register_electricity_tariffs" + "." + k + "." + kk)
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *Product) validateSingleRegisterGasTariffs(formats strfmt.Registry) error {

	if err := validate.Required("single_register_gas_tariffs", "body", m.SingleRegisterGasTariffs); err != nil {
		return err
	}

	for k := range m.SingleRegisterGasTariffs {

		if err := validate.Required("single_register_gas_tariffs"+"."+k, "body", m.SingleRegisterGasTariffs[k]); err != nil {
			return err
		}

		if err := validate.Required("single_register_gas_tariffs"+"."+k, "body", m.SingleRegisterGasTariffs[k]); err != nil {
			return err
		}

		for kk := range m.SingleRegisterGasTariffs[k] {

			if err := validate.Required("single_register_gas_tariffs"+"."+k+"."+kk, "body", m.SingleRegisterGasTariffs[k][kk]); err != nil {
				return err
			}
			if val, ok := m.SingleRegisterGasTariffs[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("single_register_gas_tariffs" + "." + k + "." + kk)
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("single_register_gas_tariffs" + "." + k + "." + kk)
					}
					return err
				}
			}

		}

	}

	return nil
}

func (m *Product) validateTariffsActiveAt(formats strfmt.Registry) error {

	if err := validate.Required("tariffs_active_at", "body", strfmt.DateTime(m.TariffsActiveAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("tariffs_active_at", "body", "date-time", m.TariffsActiveAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateTerm(formats strfmt.Registry) error {
	if swag.IsZero(m.Term) { // not required
		return nil
	}

	if err := validate.MinimumInt("term", "body", *m.Term, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("term", "body", *m.Term, 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this product based on the context it is used
func (m *Product) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDualRegisterElectricityTariffs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsRestricted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSampleConsumption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSampleQuotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSingleRegisterElectricityTariffs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSingleRegisterGasTariffs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTariffsActiveAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Product) contextValidateBrand(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "brand", "body", string(m.Brand)); err != nil {
		return err
	}

	return nil
}

func (m *Product) contextValidateDualRegisterElectricityTariffs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("dual_register_electricity_tariffs", "body", m.DualRegisterElectricityTariffs); err != nil {
		return err
	}

	for k := range m.DualRegisterElectricityTariffs {

		if err := validate.Required("dual_register_electricity_tariffs"+"."+k, "body", m.DualRegisterElectricityTariffs[k]); err != nil {
			return err
		}

		for kk := range m.DualRegisterElectricityTariffs[k] {

			if val, ok := m.DualRegisterElectricityTariffs[k][kk]; ok {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (m *Product) contextValidateIsRestricted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "is_restricted", "body", bool(m.IsRestricted)); err != nil {
		return err
	}

	return nil
}

func (m *Product) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "links", "body", []*Link(m.Links)); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {

		if m.Links[i] != nil {

			if swag.IsZero(m.Links[i]) { // not required
				return nil
			}

			if err := m.Links[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Product) contextValidateSampleConsumption(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Product) contextValidateSampleQuotes(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Product) contextValidateSingleRegisterElectricityTariffs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("single_register_electricity_tariffs", "body", m.SingleRegisterElectricityTariffs); err != nil {
		return err
	}

	for k := range m.SingleRegisterElectricityTariffs {

		if err := validate.Required("single_register_electricity_tariffs"+"."+k, "body", m.SingleRegisterElectricityTariffs[k]); err != nil {
			return err
		}

		for kk := range m.SingleRegisterElectricityTariffs[k] {

			if val, ok := m.SingleRegisterElectricityTariffs[k][kk]; ok {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (m *Product) contextValidateSingleRegisterGasTariffs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("single_register_gas_tariffs", "body", m.SingleRegisterGasTariffs); err != nil {
		return err
	}

	for k := range m.SingleRegisterGasTariffs {

		if err := validate.Required("single_register_gas_tariffs"+"."+k, "body", m.SingleRegisterGasTariffs[k]); err != nil {
			return err
		}

		for kk := range m.SingleRegisterGasTariffs[k] {

			if val, ok := m.SingleRegisterGasTariffs[k][kk]; ok {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (m *Product) contextValidateTariffsActiveAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tariffs_active_at", "body", strfmt.DateTime(m.TariffsActiveAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Product) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Product) UnmarshalBinary(b []byte) error {
	var res Product
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductDualRegisterElectricityTariffsAnon Tariffs per payment method (DIRECT_DEBIT_MONTHLY, DIRECT_DEBIT_QUARTERLY, POROB, PREPAYMENT, VARYING)
//
// swagger:model ProductDualRegisterElectricityTariffsAnon
type ProductDualRegisterElectricityTariffsAnon struct {
	Eco7ElectricityTariff
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductDualRegisterElectricityTariffsAnon) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Eco7ElectricityTariff
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Eco7ElectricityTariff = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductDualRegisterElectricityTariffsAnon) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.Eco7ElectricityTariff)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product dual register electricity tariffs anon
func (m *ProductDualRegisterElectricityTariffsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Eco7ElectricityTariff
	if err := m.Eco7ElectricityTariff.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this product dual register electricity tariffs anon based on the context it is used
func (m *ProductDualRegisterElectricityTariffsAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Eco7ElectricityTariff
	if err := m.Eco7ElectricityTariff.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ProductDualRegisterElectricityTariffsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductDualRegisterElectricityTariffsAnon) UnmarshalBinary(b []byte) error {
	var res ProductDualRegisterElectricityTariffsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductSingleRegisterElectricityTariffsAnon Tariffs per payment method (DIRECT_DEBIT_MONTHLY, DIRECT_DEBIT_QUARTERLY, POROB, PREPAYMENT, VARYING)
//
// swagger:model ProductSingleRegisterElectricityTariffsAnon
type ProductSingleRegisterElectricityTariffsAnon struct {
	StandardElectricityTariff
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductSingleRegisterElectricityTariffsAnon) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StandardElectricityTariff
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StandardElectricityTariff = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductSingleRegisterElectricityTariffsAnon) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.StandardElectricityTariff)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product single register electricity tariffs anon
func (m *ProductSingleRegisterElectricityTariffsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StandardElectricityTariff
	if err := m.StandardElectricityTariff.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this product single register electricity tariffs anon based on the context it is used
func (m *ProductSingleRegisterElectricityTariffsAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StandardElectricityTariff
	if err := m.StandardElectricityTariff.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ProductSingleRegisterElectricityTariffsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductSingleRegisterElectricityTariffsAnon) UnmarshalBinary(b []byte) error {
	var res ProductSingleRegisterElectricityTariffsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProductSingleRegisterGasTariffsAnon Tariffs per payment method (DIRECT_DEBIT_MONTHLY, DIRECT_DEBIT_QUARTERLY, POROB, PREPAYMENT, VARYING)
//
// swagger:model ProductSingleRegisterGasTariffsAnon
type ProductSingleRegisterGasTariffsAnon struct {
	GasTariff
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ProductSingleRegisterGasTariffsAnon) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GasTariff
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GasTariff = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ProductSingleRegisterGasTariffsAnon) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.GasTariff)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this product single register gas tariffs anon
func (m *ProductSingleRegisterGasTariffsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GasTariff
	if err := m.GasTariff.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this product single register gas tariffs anon based on the context it is used
func (m *ProductSingleRegisterGasTariffsAnon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GasTariff
	if err := m.GasTariff.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ProductSingleRegisterGasTariffsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductSingleRegisterGasTariffsAnon) UnmarshalBinary(b []byte) error {
	var res ProductSingleRegisterGasTariffsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
