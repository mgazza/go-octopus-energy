// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Agreement agreement
//
// swagger:model _Agreement
type Agreement struct {

	// Bespoke tariff rates for the new agreement, if applicable.
	BespokeTariffRates []*BespokeTariffRate `json:"bespoke_tariff_rates"`

	// Commission applicable to this tariff renewal.
	Commission struct {
		Commission
	} `json:"commission,omitempty"`

	// MPRN or MPAN of the meter point getting a new agreement.
	// Required: true
	Mpxn *string `json:"mpxn"`

	// Tariff code for the new agreements.
	// Required: true
	TariffCode *string `json:"tariff_code"`

	// Date (inclusive) the new agreement is valid from.
	// Required: true
	// Format: date
	ValidFromDate *strfmt.Date `json:"valid_from_date"`

	// Date (exclusive) the new agreement is valid to.
	// Format: date
	ValidToDate strfmt.Date `json:"valid_to_date,omitempty"`
}

// Validate validates this agreement
func (m *Agreement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBespokeTariffRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMpxn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTariffCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFromDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidToDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Agreement) validateBespokeTariffRates(formats strfmt.Registry) error {
	if swag.IsZero(m.BespokeTariffRates) { // not required
		return nil
	}

	for i := 0; i < len(m.BespokeTariffRates); i++ {
		if swag.IsZero(m.BespokeTariffRates[i]) { // not required
			continue
		}

		if m.BespokeTariffRates[i] != nil {
			if err := m.BespokeTariffRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bespoke_tariff_rates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bespoke_tariff_rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Agreement) validateCommission(formats strfmt.Registry) error {
	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	return nil
}

func (m *Agreement) validateMpxn(formats strfmt.Registry) error {

	if err := validate.Required("mpxn", "body", m.Mpxn); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateTariffCode(formats strfmt.Registry) error {

	if err := validate.Required("tariff_code", "body", m.TariffCode); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateValidFromDate(formats strfmt.Registry) error {

	if err := validate.Required("valid_from_date", "body", m.ValidFromDate); err != nil {
		return err
	}

	if err := validate.FormatOf("valid_from_date", "body", "date", m.ValidFromDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateValidToDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidToDate) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_to_date", "body", "date", m.ValidToDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this agreement based on the context it is used
func (m *Agreement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBespokeTariffRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Agreement) contextValidateBespokeTariffRates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BespokeTariffRates); i++ {

		if m.BespokeTariffRates[i] != nil {

			if swag.IsZero(m.BespokeTariffRates[i]) { // not required
				return nil
			}

			if err := m.BespokeTariffRates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bespoke_tariff_rates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bespoke_tariff_rates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Agreement) contextValidateCommission(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *Agreement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Agreement) UnmarshalBinary(b []byte) error {
	var res Agreement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
