// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SampleConsumption sample consumption
//
// swagger:model SampleConsumption
type SampleConsumption struct {

	// Consumption type
	// Required: true
	DualFuelDualRate map[string]int64 `json:"dual_fuel_dual_rate"`

	// Consumption type
	// Required: true
	DualFuelSingleRate map[string]int64 `json:"dual_fuel_single_rate"`

	// Consumption type
	// Required: true
	ElectricityDualRate map[string]int64 `json:"electricity_dual_rate"`

	// Consumption type
	// Required: true
	ElectricitySingleRate map[string]int64 `json:"electricity_single_rate"`
}

// Validate validates this sample consumption
func (m *SampleConsumption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDualFuelDualRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDualFuelSingleRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectricityDualRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectricitySingleRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SampleConsumption) validateDualFuelDualRate(formats strfmt.Registry) error {

	if err := validate.Required("dual_fuel_dual_rate", "body", m.DualFuelDualRate); err != nil {
		return err
	}

	return nil
}

func (m *SampleConsumption) validateDualFuelSingleRate(formats strfmt.Registry) error {

	if err := validate.Required("dual_fuel_single_rate", "body", m.DualFuelSingleRate); err != nil {
		return err
	}

	return nil
}

func (m *SampleConsumption) validateElectricityDualRate(formats strfmt.Registry) error {

	if err := validate.Required("electricity_dual_rate", "body", m.ElectricityDualRate); err != nil {
		return err
	}

	return nil
}

func (m *SampleConsumption) validateElectricitySingleRate(formats strfmt.Registry) error {

	if err := validate.Required("electricity_single_rate", "body", m.ElectricitySingleRate); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sample consumption based on context it is used
func (m *SampleConsumption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SampleConsumption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SampleConsumption) UnmarshalBinary(b []byte) error {
	var res SampleConsumption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
