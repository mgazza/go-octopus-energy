// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteCreated quote created
//
// swagger:model QuoteCreated
type QuoteCreated struct {

	// code
	// Required: true
	Code *string `json:"code"`

	// gsp
	// Required: true
	Gsp *string `json:"gsp"`

	// products
	// Required: true
	// Read Only: true
	Products []interface{} `json:"products"`
}

// Validate validates this quote created
func (m *QuoteCreated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGsp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteCreated) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *QuoteCreated) validateGsp(formats strfmt.Registry) error {

	if err := validate.Required("gsp", "body", m.Gsp); err != nil {
		return err
	}

	return nil
}

func (m *QuoteCreated) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("products", "body", m.Products); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this quote created based on the context it is used
func (m *QuoteCreated) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteCreated) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "products", "body", []interface{}(m.Products)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteCreated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteCreated) UnmarshalBinary(b []byte) error {
	var res QuoteCreated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
