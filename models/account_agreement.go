// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountAgreement account agreement
//
// swagger:model AccountAgreement
type AccountAgreement struct {

	// tariff code
	// Example: E-1R-VAR-20-09-22-N
	TariffCode string `json:"tariff_code,omitempty"`

	// valid from
	// Example: 2020-12-17T00:00:00Z
	// Format: datetime
	ValidFrom strfmt.DateTime `json:"valid_from,omitempty"`

	// valid to
	// Format: datetime
	ValidTo strfmt.DateTime `json:"valid_to,omitempty"`
}

// Validate validates this account agreement
func (m *AccountAgreement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAgreement) validateValidFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_from", "body", "datetime", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountAgreement) validateValidTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_to", "body", "datetime", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this account agreement based on context it is used
func (m *AccountAgreement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccountAgreement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAgreement) UnmarshalBinary(b []byte) error {
	var res AccountAgreement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
