// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address address
//
// swagger:model Address
type Address struct {

	// address line 1
	// Required: true
	// Max Length: 512
	AddressLine1 *string `json:"address_line_1"`

	// address line 2
	// Max Length: 512
	AddressLine2 string `json:"address_line_2,omitempty"`

	// address line 3
	// Max Length: 512
	AddressLine3 string `json:"address_line_3,omitempty"`

	// county
	// Max Length: 512
	County string `json:"county,omitempty"`

	// delivery point identifier
	// Max Length: 11
	DeliveryPointIdentifier string `json:"delivery_point_identifier,omitempty"`

	// postcode
	// Required: true
	// Max Length: 8
	Postcode *string `json:"postcode"`

	// town
	// Max Length: 512
	Town string `json:"town,omitempty"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryPointIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTown(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("address_line_1", "body", m.AddressLine1); err != nil {
		return err
	}

	if err := validate.MaxLength("address_line_1", "body", *m.AddressLine1, 512); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddressLine2(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine2) { // not required
		return nil
	}

	if err := validate.MaxLength("address_line_2", "body", m.AddressLine2, 512); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddressLine3(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine3) { // not required
		return nil
	}

	if err := validate.MaxLength("address_line_3", "body", m.AddressLine3, 512); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateCounty(formats strfmt.Registry) error {
	if swag.IsZero(m.County) { // not required
		return nil
	}

	if err := validate.MaxLength("county", "body", m.County, 512); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateDeliveryPointIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryPointIdentifier) { // not required
		return nil
	}

	if err := validate.MaxLength("delivery_point_identifier", "body", m.DeliveryPointIdentifier, 11); err != nil {
		return err
	}

	return nil
}

func (m *Address) validatePostcode(formats strfmt.Registry) error {

	if err := validate.Required("postcode", "body", m.Postcode); err != nil {
		return err
	}

	if err := validate.MaxLength("postcode", "body", *m.Postcode, 8); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateTown(formats strfmt.Registry) error {
	if swag.IsZero(m.Town) { // not required
		return nil
	}

	if err := validate.MaxLength("town", "body", m.Town, 512); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
