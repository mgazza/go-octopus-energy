// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Create Serializer to create an account via a REST API.
//
// Temporary to allow for legacy behaviour where uplifts do not count towards quoted amounts,
// which is potentially only OEGB behaviour.
//
// swagger:model Create
type Create struct {

	// A unique reference to previous external account number or similar account identifier.
	//
	// The account reference must be in NAMESPACE-VALUE format.
	// Max Length: 128
	AccountReference string `json:"account_reference,omitempty"`

	// * `BUSINESS` - BUSINESS
	// * `DOMESTIC` - DOMESTIC
	// * `BUSINESS OCCUPIER` - BUSINESS OCCUPIER
	// * `OCCUPIER` - OCCUPIER
	// * `MANAGED` - MANAGED
	// * `PORTFOLIO LEAD` - PORTFOLIO LEAD
	// * `SYSTEM` - SYSTEM
	// * `BUSINESS VACANT` - BUSINESS VACANT
	// * `DOMESTIC VACANT` - DOMESTIC VACANT
	// * `ANONYMISED` - ANONYMISED
	// Required: true
	// Enum: ["BUSINESS","DOMESTIC","BUSINESS OCCUPIER","OCCUPIER","MANAGED","PORTFOLIO LEAD","SYSTEM","BUSINESS VACANT","DOMESTIC VACANT","ANONYMISED"]
	AccountType *string `json:"account_type"`

	// affiliate
	Affiliate *Affiliate `json:"affiliate,omitempty"`

	// billing address
	// Required: true
	BillingAddress *Address `json:"billing_address"`

	// A code to specify the account should be for a particular brand.
	//
	// This is only required when creating an account in an instance with multiple brands and for which the requested brand is not the default brand of that instance.
	//
	// * `OCTOPUS_ENERGY` - OCTOPUS_ENERGY
	// * `COOP_ENERGY` - COOP_ENERGY
	// * `LONDON_POWER` - LONDON_POWER
	// Enum: ["OCTOPUS_ENERGY","COOP_ENERGY","LONDON_POWER"]
	BrandCode *string `json:"brand_code,omitempty"`

	// business
	Business *Business `json:"business,omitempty"`

	// deposit
	Deposit *Deposit `json:"deposit,omitempty"`

	// At least one electricity or gas meter-point must be included. A maximum of two electricity and one gas meter-point can be included. All meter-points must be based in the Great Britain. All meter-points must belong to the same address. For an electricity meter-point, at least one of 'mpan' or 'address' must be included. At least one of 'consumption_standard' (standard tariff) or a combination of 'consumption_day' and 'consumption_night' (two-rate tariff) or 'consumption_day', 'consumption_night' and 'consumption_off_peak' (three-rate tariff) must be included depending on the type of tariff specified.
	ElectricityMeterPoints []*ElectricityMeterPoint `json:"electricity_meter_points"`

	// At least one electricity or gas meter-point must be included. A maximum of two electricity and one gas meter-point can be included. All meter-points must be based in the Great Britain. All meter-points must belong to the same address. For a gas meter-point, at least one of 'mprn' or 'address' must be included, as well as 'consumption_standard'.
	GasMeterPoints []*GasMeterPoint `json:"gas_meter_points"`

	// Whether this account is a change of tenancy at the property.
	// Required: true
	IsChangeOfTenancy *bool `json:"is_change_of_tenancy"`

	// An array of key value pairs for storing generic metadata relating to an account.
	Metadata []*Metadata `json:"metadata"`

	// The payment details are required when using the method 'MONTHLY_DIRECT_DEBIT' but are optional if all the meters are of type PREPAYMENT'. The 'MONTHLY_DIRECT_PAYMENT' method is not available to all users.
	Payment struct {
		Payment
	} `json:"payment,omitempty"`

	// A preferred supply start date.
	//
	// Only include this field if the earliest possible supply startdate is not preferred.
	// Format: date
	PreferredSsd strfmt.Date `json:"preferred_ssd,omitempty"`

	// A promotional code that will be applied to the account.
	// Max Length: 255
	PromoRewardCode string `json:"promo_reward_code,omitempty"`

	// The code of an existing legacy quote created using the legacy 'CreatQuote' mutation as part of the join supplier journey for this new customer. If the quote was generated as part of an affiliate session, the affiliate link and any query parameters belonging to the session will be associated with the created account. Note: only one of 'quote_code' and 'quote_request_code' should be provided in the input.
	QuoteCode string `json:"quote_code,omitempty"`

	// The code of an existing quote created using the 'QuoteNewMeterPoints' mutation as part of the join supplier journey for this new customer. If the quote was generated as part of an affiliate session, the affiliate link and any query parameters belonging to the session will be associated with the created account. Note: only one of 'quote_code' and 'quote_request_code' should be provided in the input.
	QuoteRequestCode string `json:"quote_request_code,omitempty"`

	// A unique partner reference.
	//
	// The reference provided should be unique per switch.
	// Required: true
	// Max Length: 64
	Reference *string `json:"reference"`

	// The referral code of an existing account linked to a Kraken referral scheme.
	// Max Length: 256
	ReferralCode string `json:"referral_code,omitempty"`

	// Communication delivery preference
	//
	// When requires_postal_comms is True, then set to POSTAL, else set to EMAIL, when not provided it will be null.
	RequiresPostalComms bool `json:"requires_postal_comms,omitempty"`

	// * `DIRECT` - Direct
	// * `PRICE_COMPARISON` - Price comparison site
	// * `TELESALES` - Telesales
	// * `DIGI_TELESALES` - Digital telesales
	// * `EVENTS` - Events
	// * `FIELD_SALES` - Field sales
	// * `AGGREGATOR` - Aggregator
	// * `PARTNERSHIPS` - Partnerships
	// * `NEW_TENANT` - New tenant
	// * `MOVE_IN` - Move in
	// * `WORKPLACE_POP_UP` - Workplace pop-up
	// * `BROKER` - Broker
	// * `PARENT_POWER` - Parent power
	// * `PEOPLE_POWER` - People power
	// * `GIFT_OF_KIT` - Gift of kit
	// * `HIGH_REFERRER` - High referrer
	// * `SUPPLIER_OF_LAST_RESORT` - Supplier of last resort
	// * `ACQUISITION` - Acquisition
	// * `WORKS_WITH_OCTOPUS` - Works with octopus
	// * `LANDLORD` - Landlord
	// * `DEBT_COLLECTION_AGENCY` - Debt collection agency
	// * `OCTOPUS_TRUSTED_PARTNERS` - Octopus Trusted Partners
	// Enum: ["DIRECT","PRICE_COMPARISON","TELESALES","DIGI_TELESALES","EVENTS","FIELD_SALES","AGGREGATOR","PARTNERSHIPS","NEW_TENANT","MOVE_IN","WORKPLACE_POP_UP","BROKER","PARENT_POWER","PEOPLE_POWER","GIFT_OF_KIT","HIGH_REFERRER","SUPPLIER_OF_LAST_RESORT","ACQUISITION","WORKS_WITH_OCTOPUS","LANDLORD","DEBT_COLLECTION_AGENCY","OCTOPUS_TRUSTED_PARTNERS"]
	SalesChannel string `json:"sales_channel,omitempty"`

	// An optional segmentation of the sales channel, e.g. the names of the specific price comparison site, or the telesales organisation.
	// Max Length: 128
	SalesSubchannel string `json:"sales_subchannel,omitempty"`

	// signup reward code
	// Max Length: 255
	SignupRewardCode string `json:"signup_reward_code,omitempty"`

	// The occupierâ€™s interest in installing a smart meter.
	//
	// * `SMETS2_INTEREST_PRIORITY` - Priority
	// * `SMETS2_INTEREST_INTERESTED` - Interested
	// * `SMETS2_INTEREST_NOT_AT_THE_MOMENT` - No interest at the moment, ask again later
	// * `SMETS2_INTEREST_NOT_INTERESTED` - Not Interested
	// Enum: ["SMETS2_INTEREST_PRIORITY","SMETS2_INTEREST_INTERESTED","SMETS2_INTEREST_NOT_AT_THE_MOMENT","SMETS2_INTEREST_NOT_INTERESTED"]
	SmartMeterInterest string `json:"smart_meter_interest,omitempty"`

	// The read permission frequency the occupier grants to meter readings from smart meters.
	//
	// * `MONTHLY` - Monthly
	// * `DAILY` - Daily
	// * `HALF_HOURLY` - Half-hourly
	// Enum: ["MONTHLY","DAILY","HALF_HOURLY"]
	SmartMeterReadPermission string `json:"smart_meter_read_permission,omitempty"`

	// A code to indicate which type of smart tariff the customer is meant to onboard onto.
	//
	// This is a restricted option. Please get in touch for information on whether this can be enabled and what the allowed options are.
	//
	// * `AGILE` - Agile
	// * `OCTOPUS_GO` - Octopus Go
	// * `TESLA_IMPORT` - Tesla Import
	// * `INTELLIGENT_OCTOPUS` - Intelligent Octopus
	// * `GO_GREEN` - Go Green
	// * `COSY_OCTOPUS` - Cosy Octopus
	// * `OCTOPUS_FLUX` - Octopus Flux
	// * `TRACKER` - Tracker
	// * `AIRA_ZERO` - Aira Zero
	// Enum: ["AGILE","OCTOPUS_GO","TESLA_IMPORT","INTELLIGENT_OCTOPUS","GO_GREEN","COSY_OCTOPUS","OCTOPUS_FLUX","TRACKER","AIRA_ZERO"]
	SmartOnboardingProductType string `json:"smart_onboarding_product_type,omitempty"`

	// A datetime of when the account sale was made.
	// Format: date-time
	SoldAt strfmt.DateTime `json:"sold_at,omitempty"`

	// * `CALL_CENTRE_INBOUND` - CALL_CENTRE_INBOUND
	// * `CALL_CENTRE_OUTBOUND` - CALL_CENTRE_OUTBOUND
	// * `INTERNET` - INTERNET
	// * `FACE_TO_FACE` - FACE_TO_FACE
	// Required: true
	// Enum: ["CALL_CENTRE_INBOUND","CALL_CENTRE_OUTBOUND","INTERNET","FACE_TO_FACE"]
	Source *string `json:"source"`

	// users
	// Required: true
	Users []*User `json:"users"`
}

// Validate validates this create
func (m *Create) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffiliate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrandCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusiness(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeposit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElectricityMeterPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasMeterPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsChangeOfTenancy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredSsd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromoRewardCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferralCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesSubchannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignupRewardCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartMeterInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartMeterReadPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartOnboardingProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoldAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Create) validateAccountReference(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("account_reference", "body", m.AccountReference, 128); err != nil {
		return err
	}

	return nil
}

var createTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUSINESS","DOMESTIC","BUSINESS OCCUPIER","OCCUPIER","MANAGED","PORTFOLIO LEAD","SYSTEM","BUSINESS VACANT","DOMESTIC VACANT","ANONYMISED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeAccountTypePropEnum = append(createTypeAccountTypePropEnum, v)
	}
}

const (

	// CreateAccountTypeBUSINESS captures enum value "BUSINESS"
	CreateAccountTypeBUSINESS string = "BUSINESS"

	// CreateAccountTypeDOMESTIC captures enum value "DOMESTIC"
	CreateAccountTypeDOMESTIC string = "DOMESTIC"

	// CreateAccountTypeBUSINESSOCCUPIER captures enum value "BUSINESS OCCUPIER"
	CreateAccountTypeBUSINESSOCCUPIER string = "BUSINESS OCCUPIER"

	// CreateAccountTypeOCCUPIER captures enum value "OCCUPIER"
	CreateAccountTypeOCCUPIER string = "OCCUPIER"

	// CreateAccountTypeMANAGED captures enum value "MANAGED"
	CreateAccountTypeMANAGED string = "MANAGED"

	// CreateAccountTypePORTFOLIOLEAD captures enum value "PORTFOLIO LEAD"
	CreateAccountTypePORTFOLIOLEAD string = "PORTFOLIO LEAD"

	// CreateAccountTypeSYSTEM captures enum value "SYSTEM"
	CreateAccountTypeSYSTEM string = "SYSTEM"

	// CreateAccountTypeBUSINESSVACANT captures enum value "BUSINESS VACANT"
	CreateAccountTypeBUSINESSVACANT string = "BUSINESS VACANT"

	// CreateAccountTypeDOMESTICVACANT captures enum value "DOMESTIC VACANT"
	CreateAccountTypeDOMESTICVACANT string = "DOMESTIC VACANT"

	// CreateAccountTypeANONYMISED captures enum value "ANONYMISED"
	CreateAccountTypeANONYMISED string = "ANONYMISED"
)

// prop value enum
func (m *Create) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeAccountTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("account_type", "body", m.AccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountTypeEnum("account_type", "body", *m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateAffiliate(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliate) { // not required
		return nil
	}

	if m.Affiliate != nil {
		if err := m.Affiliate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliate")
			}
			return err
		}
	}

	return nil
}

func (m *Create) validateBillingAddress(formats strfmt.Registry) error {

	if err := validate.Required("billing_address", "body", m.BillingAddress); err != nil {
		return err
	}

	if m.BillingAddress != nil {
		if err := m.BillingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

var createTypeBrandCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OCTOPUS_ENERGY","COOP_ENERGY","LONDON_POWER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeBrandCodePropEnum = append(createTypeBrandCodePropEnum, v)
	}
}

const (

	// CreateBrandCodeOCTOPUSENERGY captures enum value "OCTOPUS_ENERGY"
	CreateBrandCodeOCTOPUSENERGY string = "OCTOPUS_ENERGY"

	// CreateBrandCodeCOOPENERGY captures enum value "COOP_ENERGY"
	CreateBrandCodeCOOPENERGY string = "COOP_ENERGY"

	// CreateBrandCodeLONDONPOWER captures enum value "LONDON_POWER"
	CreateBrandCodeLONDONPOWER string = "LONDON_POWER"
)

// prop value enum
func (m *Create) validateBrandCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeBrandCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateBrandCode(formats strfmt.Registry) error {
	if swag.IsZero(m.BrandCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBrandCodeEnum("brand_code", "body", *m.BrandCode); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateBusiness(formats strfmt.Registry) error {
	if swag.IsZero(m.Business) { // not required
		return nil
	}

	if m.Business != nil {
		if err := m.Business.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business")
			}
			return err
		}
	}

	return nil
}

func (m *Create) validateDeposit(formats strfmt.Registry) error {
	if swag.IsZero(m.Deposit) { // not required
		return nil
	}

	if m.Deposit != nil {
		if err := m.Deposit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deposit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deposit")
			}
			return err
		}
	}

	return nil
}

func (m *Create) validateElectricityMeterPoints(formats strfmt.Registry) error {
	if swag.IsZero(m.ElectricityMeterPoints) { // not required
		return nil
	}

	for i := 0; i < len(m.ElectricityMeterPoints); i++ {
		if swag.IsZero(m.ElectricityMeterPoints[i]) { // not required
			continue
		}

		if m.ElectricityMeterPoints[i] != nil {
			if err := m.ElectricityMeterPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("electricity_meter_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("electricity_meter_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Create) validateGasMeterPoints(formats strfmt.Registry) error {
	if swag.IsZero(m.GasMeterPoints) { // not required
		return nil
	}

	for i := 0; i < len(m.GasMeterPoints); i++ {
		if swag.IsZero(m.GasMeterPoints[i]) { // not required
			continue
		}

		if m.GasMeterPoints[i] != nil {
			if err := m.GasMeterPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gas_meter_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gas_meter_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Create) validateIsChangeOfTenancy(formats strfmt.Registry) error {

	if err := validate.Required("is_change_of_tenancy", "body", m.IsChangeOfTenancy); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	for i := 0; i < len(m.Metadata); i++ {
		if swag.IsZero(m.Metadata[i]) { // not required
			continue
		}

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Create) validatePayment(formats strfmt.Registry) error {
	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	return nil
}

func (m *Create) validatePreferredSsd(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredSsd) { // not required
		return nil
	}

	if err := validate.FormatOf("preferred_ssd", "body", "date", m.PreferredSsd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Create) validatePromoRewardCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PromoRewardCode) { // not required
		return nil
	}

	if err := validate.MaxLength("promo_reward_code", "body", m.PromoRewardCode, 255); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	if err := validate.MaxLength("reference", "body", *m.Reference, 64); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateReferralCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferralCode) { // not required
		return nil
	}

	if err := validate.MaxLength("referral_code", "body", m.ReferralCode, 256); err != nil {
		return err
	}

	return nil
}

var createTypeSalesChannelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DIRECT","PRICE_COMPARISON","TELESALES","DIGI_TELESALES","EVENTS","FIELD_SALES","AGGREGATOR","PARTNERSHIPS","NEW_TENANT","MOVE_IN","WORKPLACE_POP_UP","BROKER","PARENT_POWER","PEOPLE_POWER","GIFT_OF_KIT","HIGH_REFERRER","SUPPLIER_OF_LAST_RESORT","ACQUISITION","WORKS_WITH_OCTOPUS","LANDLORD","DEBT_COLLECTION_AGENCY","OCTOPUS_TRUSTED_PARTNERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeSalesChannelPropEnum = append(createTypeSalesChannelPropEnum, v)
	}
}

const (

	// CreateSalesChannelDIRECT captures enum value "DIRECT"
	CreateSalesChannelDIRECT string = "DIRECT"

	// CreateSalesChannelPRICECOMPARISON captures enum value "PRICE_COMPARISON"
	CreateSalesChannelPRICECOMPARISON string = "PRICE_COMPARISON"

	// CreateSalesChannelTELESALES captures enum value "TELESALES"
	CreateSalesChannelTELESALES string = "TELESALES"

	// CreateSalesChannelDIGITELESALES captures enum value "DIGI_TELESALES"
	CreateSalesChannelDIGITELESALES string = "DIGI_TELESALES"

	// CreateSalesChannelEVENTS captures enum value "EVENTS"
	CreateSalesChannelEVENTS string = "EVENTS"

	// CreateSalesChannelFIELDSALES captures enum value "FIELD_SALES"
	CreateSalesChannelFIELDSALES string = "FIELD_SALES"

	// CreateSalesChannelAGGREGATOR captures enum value "AGGREGATOR"
	CreateSalesChannelAGGREGATOR string = "AGGREGATOR"

	// CreateSalesChannelPARTNERSHIPS captures enum value "PARTNERSHIPS"
	CreateSalesChannelPARTNERSHIPS string = "PARTNERSHIPS"

	// CreateSalesChannelNEWTENANT captures enum value "NEW_TENANT"
	CreateSalesChannelNEWTENANT string = "NEW_TENANT"

	// CreateSalesChannelMOVEIN captures enum value "MOVE_IN"
	CreateSalesChannelMOVEIN string = "MOVE_IN"

	// CreateSalesChannelWORKPLACEPOPUP captures enum value "WORKPLACE_POP_UP"
	CreateSalesChannelWORKPLACEPOPUP string = "WORKPLACE_POP_UP"

	// CreateSalesChannelBROKER captures enum value "BROKER"
	CreateSalesChannelBROKER string = "BROKER"

	// CreateSalesChannelPARENTPOWER captures enum value "PARENT_POWER"
	CreateSalesChannelPARENTPOWER string = "PARENT_POWER"

	// CreateSalesChannelPEOPLEPOWER captures enum value "PEOPLE_POWER"
	CreateSalesChannelPEOPLEPOWER string = "PEOPLE_POWER"

	// CreateSalesChannelGIFTOFKIT captures enum value "GIFT_OF_KIT"
	CreateSalesChannelGIFTOFKIT string = "GIFT_OF_KIT"

	// CreateSalesChannelHIGHREFERRER captures enum value "HIGH_REFERRER"
	CreateSalesChannelHIGHREFERRER string = "HIGH_REFERRER"

	// CreateSalesChannelSUPPLIEROFLASTRESORT captures enum value "SUPPLIER_OF_LAST_RESORT"
	CreateSalesChannelSUPPLIEROFLASTRESORT string = "SUPPLIER_OF_LAST_RESORT"

	// CreateSalesChannelACQUISITION captures enum value "ACQUISITION"
	CreateSalesChannelACQUISITION string = "ACQUISITION"

	// CreateSalesChannelWORKSWITHOCTOPUS captures enum value "WORKS_WITH_OCTOPUS"
	CreateSalesChannelWORKSWITHOCTOPUS string = "WORKS_WITH_OCTOPUS"

	// CreateSalesChannelLANDLORD captures enum value "LANDLORD"
	CreateSalesChannelLANDLORD string = "LANDLORD"

	// CreateSalesChannelDEBTCOLLECTIONAGENCY captures enum value "DEBT_COLLECTION_AGENCY"
	CreateSalesChannelDEBTCOLLECTIONAGENCY string = "DEBT_COLLECTION_AGENCY"

	// CreateSalesChannelOCTOPUSTRUSTEDPARTNERS captures enum value "OCTOPUS_TRUSTED_PARTNERS"
	CreateSalesChannelOCTOPUSTRUSTEDPARTNERS string = "OCTOPUS_TRUSTED_PARTNERS"
)

// prop value enum
func (m *Create) validateSalesChannelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeSalesChannelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateSalesChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.SalesChannel) { // not required
		return nil
	}

	// value enum
	if err := m.validateSalesChannelEnum("sales_channel", "body", m.SalesChannel); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateSalesSubchannel(formats strfmt.Registry) error {
	if swag.IsZero(m.SalesSubchannel) { // not required
		return nil
	}

	if err := validate.MaxLength("sales_subchannel", "body", m.SalesSubchannel, 128); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateSignupRewardCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SignupRewardCode) { // not required
		return nil
	}

	if err := validate.MaxLength("signup_reward_code", "body", m.SignupRewardCode, 255); err != nil {
		return err
	}

	return nil
}

var createTypeSmartMeterInterestPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMETS2_INTEREST_PRIORITY","SMETS2_INTEREST_INTERESTED","SMETS2_INTEREST_NOT_AT_THE_MOMENT","SMETS2_INTEREST_NOT_INTERESTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeSmartMeterInterestPropEnum = append(createTypeSmartMeterInterestPropEnum, v)
	}
}

const (

	// CreateSmartMeterInterestSMETS2INTERESTPRIORITY captures enum value "SMETS2_INTEREST_PRIORITY"
	CreateSmartMeterInterestSMETS2INTERESTPRIORITY string = "SMETS2_INTEREST_PRIORITY"

	// CreateSmartMeterInterestSMETS2INTERESTINTERESTED captures enum value "SMETS2_INTEREST_INTERESTED"
	CreateSmartMeterInterestSMETS2INTERESTINTERESTED string = "SMETS2_INTEREST_INTERESTED"

	// CreateSmartMeterInterestSMETS2INTERESTNOTATTHEMOMENT captures enum value "SMETS2_INTEREST_NOT_AT_THE_MOMENT"
	CreateSmartMeterInterestSMETS2INTERESTNOTATTHEMOMENT string = "SMETS2_INTEREST_NOT_AT_THE_MOMENT"

	// CreateSmartMeterInterestSMETS2INTERESTNOTINTERESTED captures enum value "SMETS2_INTEREST_NOT_INTERESTED"
	CreateSmartMeterInterestSMETS2INTERESTNOTINTERESTED string = "SMETS2_INTEREST_NOT_INTERESTED"
)

// prop value enum
func (m *Create) validateSmartMeterInterestEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeSmartMeterInterestPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateSmartMeterInterest(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartMeterInterest) { // not required
		return nil
	}

	// value enum
	if err := m.validateSmartMeterInterestEnum("smart_meter_interest", "body", m.SmartMeterInterest); err != nil {
		return err
	}

	return nil
}

var createTypeSmartMeterReadPermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MONTHLY","DAILY","HALF_HOURLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeSmartMeterReadPermissionPropEnum = append(createTypeSmartMeterReadPermissionPropEnum, v)
	}
}

const (

	// CreateSmartMeterReadPermissionMONTHLY captures enum value "MONTHLY"
	CreateSmartMeterReadPermissionMONTHLY string = "MONTHLY"

	// CreateSmartMeterReadPermissionDAILY captures enum value "DAILY"
	CreateSmartMeterReadPermissionDAILY string = "DAILY"

	// CreateSmartMeterReadPermissionHALFHOURLY captures enum value "HALF_HOURLY"
	CreateSmartMeterReadPermissionHALFHOURLY string = "HALF_HOURLY"
)

// prop value enum
func (m *Create) validateSmartMeterReadPermissionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeSmartMeterReadPermissionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateSmartMeterReadPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartMeterReadPermission) { // not required
		return nil
	}

	// value enum
	if err := m.validateSmartMeterReadPermissionEnum("smart_meter_read_permission", "body", m.SmartMeterReadPermission); err != nil {
		return err
	}

	return nil
}

var createTypeSmartOnboardingProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AGILE","OCTOPUS_GO","TESLA_IMPORT","INTELLIGENT_OCTOPUS","GO_GREEN","COSY_OCTOPUS","OCTOPUS_FLUX","TRACKER","AIRA_ZERO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeSmartOnboardingProductTypePropEnum = append(createTypeSmartOnboardingProductTypePropEnum, v)
	}
}

const (

	// CreateSmartOnboardingProductTypeAGILE captures enum value "AGILE"
	CreateSmartOnboardingProductTypeAGILE string = "AGILE"

	// CreateSmartOnboardingProductTypeOCTOPUSGO captures enum value "OCTOPUS_GO"
	CreateSmartOnboardingProductTypeOCTOPUSGO string = "OCTOPUS_GO"

	// CreateSmartOnboardingProductTypeTESLAIMPORT captures enum value "TESLA_IMPORT"
	CreateSmartOnboardingProductTypeTESLAIMPORT string = "TESLA_IMPORT"

	// CreateSmartOnboardingProductTypeINTELLIGENTOCTOPUS captures enum value "INTELLIGENT_OCTOPUS"
	CreateSmartOnboardingProductTypeINTELLIGENTOCTOPUS string = "INTELLIGENT_OCTOPUS"

	// CreateSmartOnboardingProductTypeGOGREEN captures enum value "GO_GREEN"
	CreateSmartOnboardingProductTypeGOGREEN string = "GO_GREEN"

	// CreateSmartOnboardingProductTypeCOSYOCTOPUS captures enum value "COSY_OCTOPUS"
	CreateSmartOnboardingProductTypeCOSYOCTOPUS string = "COSY_OCTOPUS"

	// CreateSmartOnboardingProductTypeOCTOPUSFLUX captures enum value "OCTOPUS_FLUX"
	CreateSmartOnboardingProductTypeOCTOPUSFLUX string = "OCTOPUS_FLUX"

	// CreateSmartOnboardingProductTypeTRACKER captures enum value "TRACKER"
	CreateSmartOnboardingProductTypeTRACKER string = "TRACKER"

	// CreateSmartOnboardingProductTypeAIRAZERO captures enum value "AIRA_ZERO"
	CreateSmartOnboardingProductTypeAIRAZERO string = "AIRA_ZERO"
)

// prop value enum
func (m *Create) validateSmartOnboardingProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeSmartOnboardingProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateSmartOnboardingProductType(formats strfmt.Registry) error {
	if swag.IsZero(m.SmartOnboardingProductType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSmartOnboardingProductTypeEnum("smart_onboarding_product_type", "body", m.SmartOnboardingProductType); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateSoldAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SoldAt) { // not required
		return nil
	}

	if err := validate.FormatOf("sold_at", "body", "date-time", m.SoldAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var createTypeSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CALL_CENTRE_INBOUND","CALL_CENTRE_OUTBOUND","INTERNET","FACE_TO_FACE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createTypeSourcePropEnum = append(createTypeSourcePropEnum, v)
	}
}

const (

	// CreateSourceCALLCENTREINBOUND captures enum value "CALL_CENTRE_INBOUND"
	CreateSourceCALLCENTREINBOUND string = "CALL_CENTRE_INBOUND"

	// CreateSourceCALLCENTREOUTBOUND captures enum value "CALL_CENTRE_OUTBOUND"
	CreateSourceCALLCENTREOUTBOUND string = "CALL_CENTRE_OUTBOUND"

	// CreateSourceINTERNET captures enum value "INTERNET"
	CreateSourceINTERNET string = "INTERNET"

	// CreateSourceFACETOFACE captures enum value "FACE_TO_FACE"
	CreateSourceFACETOFACE string = "FACE_TO_FACE"
)

// prop value enum
func (m *Create) validateSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createTypeSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Create) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceEnum("source", "body", *m.Source); err != nil {
		return err
	}

	return nil
}

func (m *Create) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create based on the context it is used
func (m *Create) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBusiness(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeposit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElectricityMeterPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGasMeterPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Create) contextValidateAffiliate(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliate != nil {

		if swag.IsZero(m.Affiliate) { // not required
			return nil
		}

		if err := m.Affiliate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("affiliate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("affiliate")
			}
			return err
		}
	}

	return nil
}

func (m *Create) contextValidateBillingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingAddress != nil {

		if err := m.BillingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_address")
			}
			return err
		}
	}

	return nil
}

func (m *Create) contextValidateBusiness(ctx context.Context, formats strfmt.Registry) error {

	if m.Business != nil {

		if swag.IsZero(m.Business) { // not required
			return nil
		}

		if err := m.Business.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("business")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("business")
			}
			return err
		}
	}

	return nil
}

func (m *Create) contextValidateDeposit(ctx context.Context, formats strfmt.Registry) error {

	if m.Deposit != nil {

		if swag.IsZero(m.Deposit) { // not required
			return nil
		}

		if err := m.Deposit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deposit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deposit")
			}
			return err
		}
	}

	return nil
}

func (m *Create) contextValidateElectricityMeterPoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElectricityMeterPoints); i++ {

		if m.ElectricityMeterPoints[i] != nil {

			if swag.IsZero(m.ElectricityMeterPoints[i]) { // not required
				return nil
			}

			if err := m.ElectricityMeterPoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("electricity_meter_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("electricity_meter_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Create) contextValidateGasMeterPoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GasMeterPoints); i++ {

		if m.GasMeterPoints[i] != nil {

			if swag.IsZero(m.GasMeterPoints[i]) { // not required
				return nil
			}

			if err := m.GasMeterPoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gas_meter_points" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("gas_meter_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Create) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metadata); i++ {

		if m.Metadata[i] != nil {

			if swag.IsZero(m.Metadata[i]) { // not required
				return nil
			}

			if err := m.Metadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Create) contextValidatePayment(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Create) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Create) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Create) UnmarshalBinary(b []byte) error {
	var res Create
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
