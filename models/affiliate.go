// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Affiliate This serializer is used to allow affiliates to pass a signup reward code when creating
// accounts which later will then give credit to the accounts once their payments start.
//
// swagger:model Affiliate
type Affiliate struct {

	// affiliate link subdomain
	// Max Length: 64
	AffiliateLinkSubdomain string `json:"affiliate_link_subdomain,omitempty"`

	// The name of an existing organization that will be used to create an account for an affiliate.
	// Max Length: 128
	OrganizationName string `json:"organization_name,omitempty"`

	// The code of an existing signup reward referral scheme that will be used for giving credit to the created account as a signup reward.
	// Max Length: 255
	SignupRewardCode string `json:"signup_reward_code,omitempty"`
}

// Validate validates this affiliate
func (m *Affiliate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliateLinkSubdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignupRewardCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Affiliate) validateAffiliateLinkSubdomain(formats strfmt.Registry) error {
	if swag.IsZero(m.AffiliateLinkSubdomain) { // not required
		return nil
	}

	if err := validate.MaxLength("affiliate_link_subdomain", "body", m.AffiliateLinkSubdomain, 64); err != nil {
		return err
	}

	return nil
}

func (m *Affiliate) validateOrganizationName(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationName) { // not required
		return nil
	}

	if err := validate.MaxLength("organization_name", "body", m.OrganizationName, 128); err != nil {
		return err
	}

	return nil
}

func (m *Affiliate) validateSignupRewardCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SignupRewardCode) { // not required
		return nil
	}

	if err := validate.MaxLength("signup_reward_code", "body", m.SignupRewardCode, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this affiliate based on context it is used
func (m *Affiliate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Affiliate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Affiliate) UnmarshalBinary(b []byte) error {
	var res Affiliate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
